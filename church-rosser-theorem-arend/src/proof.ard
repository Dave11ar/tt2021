\import Algebra.Meta
\import Algebra.Ordered
\import Arith.Nat
\import Data.Bool
\import Debug.Meta
\import Function.Meta ($, repeat)
\import Logic \hiding (||, byLeft, byRight)
\import Logic.Classical
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Order.PartialOrder
\import Paths
\import Paths.Meta
\import my_prelude
\import lambda

{-
   В данном файле есть множество утверждений, которые надо доказать.
   Вместе они доказывают теорему Чёрча-Россера для бестипового лямбда-исчисления.
   Исходное доказательство разработано Павлом Головиным, а потом собственно доказательства
   из утверждений были удалены.

   По умолчанию, за доказательство каждого факта даётся 4 балла.
   Некоторые утверждения сложнее, их стоимость тогда указывается отдельно.

   Как решать:
   - напишите в табличку с заявками на ДЗ (вкладка "Чёрч-Россер"), какой пункт вы доказываете
   - сделайте PR с вашим доказательством и указанием авторства доказательства рядом с леммой
-}

-- d = 1, k = 0
\func spec_of_down {a : Term} {k : Nat} : count_of_globals a = count_of_globals (down1' k a) => {?}   
\func down-up-simp {l : Term} {k : Nat} : down1' k (up1' k l) = l => {?}

{- 6 баллов -}
{- author: daniil-eshkin  -}
\func down-down-comm {a : Term} {k d : Nat} (h : (d <=? k) = true) : down1' k (down1' d a) = down1' d (down1' (suc k) a)
\elim a
  | V n => down-down-comm-var h n
  | @ a1 a2 => apply-eq (down-down-comm {a1} h) (down-down-comm {a2} h)
  | L a => pmap L (down-down-comm {a} {suc k} {suc d} h)

\func down-down-comm-var {k d : Nat} (h : (d <=? k) = true) (n : Nat) : down1' k (down1' d (V n)) = down1' d (down1' (suc k) (V n))
\elim k, d, n
  | _, _, 0 => idp
  | k, d, 1 => \case (leq-elim {d} {0}) \with {
    | byLeft a => rewriteEq a $ rewriteEq (leq-true-false_false h a) idp
    | byRight a => rewriteEq a idp
  }
  | 0, suc d, _ => absurd (true/=false (inv h))
  | k, d, suc (suc n) => \case (leq-elim {suc k} {suc n}) \with {
    | byLeft a1 => \case (leq-elim {d} {suc n}) \with {
      | byLeft a2 => rewriteEq (leq-double-pred_false a1)
        $ rewriteEq a2
        $ rewriteEq (leq-true-false_false h a2)
          idp
      | byRight a2 => rewriteEq a2
        $ rewriteEq (leq-double-pred_false a1)
        $ rewriteEq a2
          idp
    }
    | byRight a1 => rewriteEq (leq-next_true $ leq-trans_true h $ leq-double-pred_true a1)
      $ rewriteEq (leq-double-pred_true a1)
      $ rewriteEq (leq-trans_true h $ leq-double-pred_true a1)
        idp
  }

\func leq-true-false_false {a b c : Nat} (l : (b <=? a) = true) (r : (b <=? c) = false) : (a <=? c) = false
\elim a, b, c
  | _, 0, _ => absurd (true/=false r)
  | 0, suc b, _ => absurd (true/=false (inv l))
  | suc a, suc b, 0 => r
  | suc a, suc b, suc c => leq-true-false_false l r

\func leq-double-pred_true {k n : Nat} (h : (suc k <=? suc n) = true) : (k <=? n) = true
\elim k, n
  | 0, 0 => idp
  | 0, suc n => idp
  | suc k, 0 => h
  | suc k, suc n => leq-double-pred_true h

\func leq-double-pred_false {k n : Nat} (h : (suc k <=? suc n) = false) : (k <=? n) = false
\elim k, n
  | 0, 0 => absurd (true/=false h)
  | 0, suc n => absurd (true/=false h)
  | suc k, 0 => h
  | suc k, suc n => leq-double-pred_false h

\func apply-eq {a b c d : Term} (h1 : a = b) (h2 : c = d) : a @ c = b @ d
  => rewriteI h1 (pmap (@ a) h2)

\func up-up-comm {a : Term} {k d : Nat} (h : (d <=? k) = true) : up1' d (up1' k a) = up1' (suc k) (up1' d a) => {?}

{- 6 баллов -}
{- author: daniil-eshkin  -}
\func up-down-comm {a : Term} {k d : Nat} (h : (d <=? k) = true) : up1' d (down1' k a) = down1' (suc k) (up1' d a)
\elim a
  | V n => up-down-comm-var h n
  | @ a1 a2 => apply-eq (up-down-comm {a1} h) (up-down-comm {a2} h)
  | L a => pmap L (up-down-comm {a} {suc k} {suc d} h)

\func up-down-comm-var {k d : Nat} (h : (d <=? k) = true) (n : Nat) : up1' d (down1' k (V n)) = down1' (suc k) (up1' d (V n))
\elim k, d, n
  | 0, 0, 0 => idp
  | 0, 0, suc n => idp
  | 0, suc d, 0 => idp
  | 0, suc d, suc n => absurd (true/=false (inv h))
  | suc k, 0, 0 => idp
  | suc k, suc d, 0 => idp
  | k, d, suc n => \case (leq-elim {k} {n}) \with {
    | byLeft a1 => \case (leq-elim {d} {suc n}) \with {
      | byLeft a2 => rewriteEq a1
        $ rewriteEq a2
        $ rewriteEq (leq-next_false a1)
          idp
      | byRight a2 => rewriteEq a1
        $ rewriteEq a2
        $ rewriteEq a1
          idp
    }
    | byRight a1 => rewriteEq (leq-next_true $ leq-trans_true h $ a1)
      $ rewriteEq a1
      $ rewriteEq (leq-trans_true h a1)
        idp
  }

-- NOTE: `up1' d (down1' k a) = down1' k (up1' (suc d) a)` doesn't work for k = 0, d = 0, a = V 0
-- up1' 0 (down1' 0 (V 0)) = down1' 0 (up1' 1 (V 0))
-- up1' 0 (V 0) = down1' 0 (V 0)
-- up1' 0 (V 0) = down1' 0 (V 0)
-- V 1 = V 0
--     k <= d -> up1' 0 (down1' k a) = down1' k (up1' (suc 0) a)
\func up-down-comm' {a : Term} {k d : Nat} (h : (suc k <=? d) = true) : up1' d (down1' k a) = down1' k (up1' (suc d) a) => {?}

{- 6 баллов -}
\func up-down-comm'' {a b : Term} {k d : Nat} (h : (d <=? k) = true) : 
   down1' d (up1' (suc k) (subst a d (up1' d b))) = up1' k (down1' d (subst a d (up1' d b))) => {?}

-- NOTE conter-example for k = 0:
--   down1' 0 (subst (V 1) 0 b) != subst (down1' 0 (V 1)) 0 b =
--                down' 0 (V 1) != subst (V 0) 0 b
--                          V 0 != b
\func down-subst-comm {a b : Term} {k d : Nat} (h : (d <=? k) = true) :
  down1' (suc k) (subst a d b) = subst (down1' (suc k) a) d (down1' (suc k) b) => {?}
\func up-subst-comm {l r : Term} {k d : Nat} (h : (k <=? d) = true) : up1' k (subst l d r) = subst (up1' k l) (suc d) (up1' k r) => {?}
\func up-subst-comm' {l r : Term} {k d : Nat} (h : (suc d <=? k) = true) : up1' k (subst l d r) = subst (up1' k l) d (up1' k r) => {?}
\func subst-suc {l r : Term} {k : Nat} : subst (up1' k l) k r = up1' k l => {?}
\func reduce-subst-after-up {l r : Term} {d : Nat} : subst (up1' d l) d r = up1' d l => {?}

-- (V n+1)[k+1 := r↑][0:=(l2[k:=r])↑]↓ = ((V n+1)[0:=l2↑]↓)[k:=r]
-- (V n+1)[k+1 := r↑][d:=(l2[k:=r])↑]↓d = ((V n+1)[d:=l2↑]↓d)[k:=r]
-- 6 баллов
\func subst-comm {l1 r l2 : Term} {k d : Nat} (h : (d <=? k) = true)
  : down1' d (subst (subst l1 (suc k) (up1' d r)) d (up1' d (subst l2 k r))) = subst (down1' d (subst l1 d (up1' d l2))) k r => {?}
  -- NOTE: Here we cannot use `down-subst-comm` due to `down1'`'s level limitation.
  -- And using extended version of it imples contradiction. But this is still true for any `d`.

\func beta*-ap-cong-left {l l' r : Term} (h : l `beta*` l') : (l @ r) `beta*` (l' @ r) => {?}
\func beta*-ap-cong-right {l r r' : Term} (h : r `beta*` r') : (l @ r) `beta*` (l @ r') => {?}
\func beta*-ap-cong {l l' r r' : Term} (hl : l `beta*` l') (hr : r `beta*` r') : (l @ r) `beta*` (l' @ r') => {?}
\func beta*-L-cong {a a' : Term} (a-to-a' : a `beta*` a') : L a `beta*` L a' => {?}
\func beta-down-cong {a a' : Term} {k : Nat} (a-to-a' : a `beta` a') : down1' k a `beta` down1' k a' => {?}
\func beta*-down-cong {a a' : Term} {k : Nat} (a-to-a' : a `beta*` a') : down1' k a `beta*` down1' k a' => {?}
\func beta-up-comm {a a' : Term} {k : Nat} (a-to-a' : a `beta` a') : up1' k a `beta` up1' k a' => {?}
\func beta*-up-comm {a a' : Term} {k : Nat} (a-to-a' : a `beta*` a') : up1' k a `beta*` up1' k a' => {?}

{- # The Church-Rosser theorem -}

{- ## Lemmas -}

\func subst-lift1 {l l' r : Term} {k : Nat} (l-to-l' : l `beta` l') : (subst l k r) `beta*` (subst l' k r) => {?}
\func subst-lift2 {l r r' : Term} {k : Nat} (r-to-r' : r `beta*` r') : (subst l k r) `beta*` (subst l k r') => {?}

{- ## Proof
--- 8 баллов
- -}

\func Church-Rosser-Thm {a b c : Term}
                        (h1 : a `beta*` b)
                        (h2 : a `beta*` c)
  : \Sigma (d : Term) (b `beta*` d) (c `beta*` d) => {?}
